This package contains the tools necessary to build and test prediction models on simulated database queries. Included are the tools to simulate query sequences, mine/clean rules from those sequences and finally use the cleaned set of rules as input to a prediction framework that runs the generated query sequence. Individual classes are detailed below: 

AssociationRule.java - represents an association rule, used by several classes in the pipeline. 

SequenceGenerator.java - used to simulate a query sequence of user-level tasks. 3 tasks are simulated, each ranging from 3-6 queries in length. There are 2 files output for each task. The first file is the SQL that is generated with 1 query on each line. The second file is the corresponding partitions (representing the discretized ranges in the query attribute space) that each query involves. The partition file is used for training the association rules and are used as the unit of prefetching. 

SequenceCleaner.java - used to clean the rules output by the rule mining library. 

SequenceExecuter.java - used to execute the query sequence using a postgres database containing NYSE stock data. There are 3 command line arguments: the type of simulation (naive or optimized), the sql file and the cleaned rule file. If naive simulation is chosen, the query sequence is executed without any prediction or prefetching. If optimized is chosen, the association are used in a prediction framework to prefetch query partitions in between the actual queries. Will output total runtime for each sequence executed. 

spmf - this is an external library used to mine association rules. There are numerous algorithms implemented. In particular, we use the class MainTestPrefixSpan_saveToFile.java and use the partition file generated from SequenceGenerator.java as input. The output will be a rule file, which must be cleaned with SequenceCleaner.java. 


The following are the steps in the execution pipeline: 
	1. Generate query sequence with QuerySequenceGenerator.java
	2. Use spmf library to generate rules from partition file output in (1)
	3. Use SequenceCleaner.java to clean the rules output from spmf
	4. Use SequenceExecuter.java to execute the sequence. Use the sql query logs from (1) and the cleaned rules from (3) as input. 














